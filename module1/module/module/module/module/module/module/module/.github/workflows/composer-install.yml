- name: Install PHP Dependencies with Composer
  uses: ramsey/composer-install@2.1.0

- uses: "shivammathur/setup-php@v2"
  with:
    php-version: "latest"
- uses: "ramsey/composer-install@v2"

- uses: "ramsey/composer-install@v2"
  with:
    dependency-versions: "lowest"
    
    - uses: "ramsey/composer-install@v2"
  with:
    composer-options: "--ignore-platform-reqs --optimize-autoloader"
    
    - uses: "ramsey/composer-install@v2"
  with:
    working-directory: "packages/acme-foo"
    
    # Install dependencies using composer.json in the root.
- uses: "ramsey/composer-install@v2"

# Install dependencies using composer.json in src/Component/Config/
- uses: "ramsey/composer-install@v2"
  with:
    working-directory: "src/Component/Config"

# Install dependencies using composer.json in src/Component/Validator/
- uses: "ramsey/composer-install@v2"
  with:
    working-directory: "src/Component/Validator"
    
    - uses: "ramsey/composer-install@v2"
  with:
    ignore-cache: "yes"
    
    - uses: "ramsey/composer-install@v2"
  with:
    custom-cache-key: "my-custom-cache-key"
    
    strategy:
  matrix:
    php:
      - "7.4"
      - "8.0"
      - "8.1"
    dependencies:
      - "lowest"
      - "highest"
    include:
      - php-version: "8.2"
        composer-options: "--ignore-platform-reqs"

steps:
  - uses: "actions/checkout@v3"
  - uses: "shivammathur/setup-php@v2"
    with:
      php-version: "${{ matrix.php }}"
  - uses: "ramsey/composer-install@v2"
    with:
      dependency-versions: "${{ matrix.dependencies }}"
      composer-options: "${{ matrix.composer-options }}"
      
      # GitHub Actions Documentation: https://docs.github.com/en/actions

name: "build"

on: ["pull_request", "push", "workflow_dispatch"]

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  composer:
    name: "Check Composer"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: 7.4
          tools: composer-normalize
          coverage: none
      - name: "Run Composer normalize"
        run: "composer-normalize --dry-run"

  test:
    name: "Expect tests"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        composer-version:
          - "v1"
          - "v2"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"
      - name: "Install expect"
        run: |
          sudo apt-get update
          sudo apt-get -y install expect
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          tools: "composer:${{ matrix.composer-version }}"
          coverage: "none"
      - name: "Run expect tests"
        run: "composer test"

  code-coverage:
    needs: test
    if: github.repository == 'ramsey/composer-install'
    name: "Code coverage"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"
      - name: "Install expect"
        run: |
          sudo apt-get update
          sudo apt-get -y install expect
      - name: "Set up Ruby"
        uses: "ruby/setup-ruby@v1"
        with:
          ruby-version: "2.7"
      - name: "Install Ruby dependencies"
        run: |
          gem install bashcov
          gem install codecov
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          tools: "composer:v2"
          coverage: "none"
      - name: "Run expect tests"
        run: "bashcov --root ./bin -- ./tests/bash-test.sh tests/tests.sh"
      - name: "Publish coverage report to Codecov"
        uses: "codecov/codecov-action@v3"
        with:
          files: "./bin/coverage/codecov-result.json"

  static-analysis:
    name: "Static analysis"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"
      - name: "Run shellcheck"
        run: "shellcheck --exclude=SC2230 bin/*.sh tests/*.sh"

  run:
    needs: test
    name: "Run action"
    runs-on: "${{ matrix.operating-system }}"
    strategy:
      matrix:
        operating-system:
          - "ubuntu-latest"
          - "windows-latest"
        dependency-versions:
          - "lowest"
          - "highest"
          - "locked"
        composer-version:
          - "v1"
          - "v2"
        working-directory:
          - "tests/fixtures/with-lock-file"
          - "tests/fixtures/no-lock-file"
          - "tests/fixtures/out-of-sync-lock"
          - ""
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          tools: "composer:${{ matrix.composer-version }}"
          coverage: "none"

      - name: "Test: plain install"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: ignore platform reqs"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          composer-options: '--ignore-platform-reqs'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: ignore platform reqs, ignore cache"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          composer-options: '--ignore-platform-reqs'
          ignore-cache: 'yes'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: ignore platform reqs, custom cache key"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          composer-options: '--ignore-platform-reqs'
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: ignore platform reqs, ignore cache, custom cache key"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          composer-options: '--ignore-platform-reqs'
          ignore-cache: 'yes'
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: ignore cache"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          ignore-cache: 'yes'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: ignore cache, custom cache key"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          ignore-cache: 'yes'
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: "Test: custom cache key"
        uses: ./
        with:
          working-directory: "${{ matrix.working-directory }}"
          dependency-versions: "${{ matrix.dependency-versions }}"
          custom-cache-key: 'my-super-custom-cache-key'

  run-no-cleanup:
    needs: test
    name: "Run unclean"
    runs-on: "${{ matrix.operating-system }}"
    strategy:
      matrix:
        operating-system:
          - "ubuntu-latest"
          - "windows-latest"
        composer-version:
          - "v1"
          - "v2"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3"
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "latest"
          tools: "composer:${{ matrix.composer-version }}"
          coverage: "none"

      - name: "Test: plain install"
        uses: ./
        with:
          working-directory: 'tests/fixtures/with-lock-file'

      - name: "Test: switch to lowest dependencies"
        uses: ./
        with:
          working-directory: 'tests/fixtures/with-lock-file'
          dependency-versions: 'lowest'

      - name: "Test: switch to highest dependencies"
        uses: ./
        with:
          working-directory: 'tests/fixtures/with-lock-file'
          dependency-versions: 'highest'
          
          name: "Install PHP Dependencies with Composer"
author: "Ben Ramsey"
description: >-
  Installs and caches PHP dependencies with Composer, accepting arguments to
  configure how and what to install.

branding:
  icon: download
  color: purple

inputs:
  dependency-versions:
    description: >-
      The version of dependencies to prefer (`lowest`, `highest`, or `locked`).
    required: true
    default: "locked"
  composer-options:
    description: >-
      Additional options to pass to Composer (e.g. `--ignore-platform-reqs`).
    required: false
  working-directory:
    description: >-
      The directory where composer.json is located, if it is not in the repository root.
    required: false
  ignore-cache:
    description: >-
      Whether to ignore the cache. Values accepted: `'yes'`, `true`, `1`.
    required: false
  custom-cache-key:
    description: >-
      A custom cache key to use instead of an auto-generated cache key.
    required: false

runs:
  using: "composite"
  steps:
    - name: "Determine PHP version"
      id: "php"
      shell: "bash"
      run: "${GITHUB_ACTION_PATH}/bin/php_version.sh"

    - name: "Determine whether we should ignore caching"
      id: "should-cache"
      shell: "bash"
      run: "${GITHUB_ACTION_PATH}/bin/should_cache.sh \"${{ inputs.ignore-cache }}\""

    - name: "Determine Composer paths"
      id: "composer"
      if: steps.should-cache.outputs.do-cache == 1
      shell: "bash"
      run: |
        ${GITHUB_ACTION_PATH}/bin/composer_paths.sh \
          "" \
          "${{ inputs.working-directory }}" \
          "${{ steps.php.outputs.path }}"

    - name: "Determine cache key"
      id: "cache-key"
      if: steps.should-cache.outputs.do-cache == 1
      shell: "bash"
      run: |
        ${GITHUB_ACTION_PATH}/bin/cache_key.sh \
          "${{ runner.os }}" \
          "${{ steps.php.outputs.version }}" \
          "${{ inputs.dependency-versions }}" \
          "${{ inputs.composer-options }}" \
          "${{ hashFiles('**/composer.json', '**/composer.lock') }}" \
          "${{ inputs.custom-cache-key }}" \
          "${{ inputs.working-directory }}"

    - name: "Cache Composer dependencies"
      if: steps.should-cache.outputs.do-cache == 1
      uses: "actions/cache@v3"
      with:
        path: "${{ steps.composer.outputs.cache-dir }}"
        key: "${{ steps.cache-key.outputs.key }}"
        restore-keys: |
          ${{ env.CACHE_RESTORE_KEY }}

    - name: "Install Composer dependencies"
      shell: "bash"
      run: |
        ${GITHUB_ACTION_PATH}/bin/composer_install.sh \
          "${{ inputs.dependency-versions }}" \
          "${{ inputs.composer-options }}" \
          "${{ inputs.working-directory }}" \
          "${{ steps.php.outputs.path }}" \
          "${{ steps.composer.outputs.command }}" \
          "${{ steps.composer.outputs.lock }}"
          
          
